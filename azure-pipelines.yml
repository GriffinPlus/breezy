trigger:
  tags:
    include:
    - v*
  branches:
    include:
    - master

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'
  # runtime identifiers (see https://docs.microsoft.com/en-us/dotnet/core/rid-catalog)
  linuxTargets: 'linux-x64'
  winTargets: 'win-x64'
  allTargets: '$(linuxTargets),$(winTargets)'
  DOTNET_CLI_TELEMETRY_OPTOUT: 'true'

steps:
- task: GitVersion@5
  inputs:
    runtime: 'core'
  displayName: 'Determine Version Number'

- task: DotNetCoreCLI@2
  displayName: Restore NuGet Packages
  inputs:
    command: restore
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: build
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: Run Tests
  inputs:
    command: test
    projects: '**/*Tests/*.csproj'
    arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'

- powershell: |
    $targets = '$(linuxTargets)'.Split(',')
    pushd "$(Build.SourcesDirectory)/src/BreezyFS.Linux"
    foreach ($target in $targets) {
        dotnet publish `
            -c $(buildConfiguration) `
            -r $target `
            -o "$(Build.ArtifactStagingDirectory)/$target" `
            /p:PublishSingleFile=true `
            /p:PublishTrimmed=true
    }
    popd
  displayName: Publish for Linux

- powershell: |
    $targets = '$(winTargets)'.Split(',')
    pushd "$(Build.SourcesDirectory)/src/BreezyFS.Windows"
    foreach ($target in $targets) {
        dotnet publish `
            -c $(buildConfiguration) `
            -r $target `
            -o "$(Build.ArtifactStagingDirectory)/$target" `
            /p:PublishSingleFile=true `
            /p:PublishTrimmed=true
    }
    popd
  displayName: Publish for Windows

- powershell: |
    foreach ($target in '$(allTargets)'.Split(',')) {
        Write-Host "Copying files for target '$target'..."
        Copy-Item README.md "$(Build.ArtifactStagingDirectory)/$target"
        Copy-Item LICENSE "$(Build.ArtifactStagingDirectory)/$target"
        Copy-Item THIRD_PARTY_NOTICES "$(Build.ArtifactStagingDirectory)/$target"
        Remove-Item "$(Build.ArtifactStagingDirectory)/$target/*.pdb"
        Compress-Archive -Path "$(Build.ArtifactStagingDirectory)/$target/*" "$(Build.ArtifactStagingDirectory)/$target/Breezy-$target-v$(GitVersion.SemVer).zip"
    }
  condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/v')
  displayName: Create Release Packages

- task: GitHubRelease@1
  displayName: Publish to Github Releases
  condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/v')
  inputs:
    gitHubConnection: 'Github'
    repositoryName: '$(Build.Repository.Name)'
    action: 'edit'
    target: '$(Build.SourceVersion)'
    tag: '$(Build.SourceBranchName)'
    title: 'Product Release $(GitVersion.SemVer)'
    releaseNotesSource: 'inline'
    assets: '$(Build.ArtifactStagingDirectory)/**/*.zip'
    changeLogCompareToRelease: 'lastFullRelease'
    changeLogType: 'commitBased'